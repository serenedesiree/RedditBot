import praw
import requests
import json
import psycopg2

# Psycopg2 allows us to log into a postgresql database
connection = psycopg2.connect(user='pgadmin username',
                              password='pgadmin password',
                              host='aws host link ',
                              port='3343',
                              database='database name')

cursor = connection.cursor()


class user():

    def __init__(self, u, o, c, e, a, n):
        self.u = u.lower()
        self.o = o
        self.c = c
        self.e = e
        self.a = a
        self.n = n

    # Inserts Watson's user data into database
    def insert_data(self):
        try:
            cursor.execute('SELECT VERSION();')
            cursor.execute('SELECT * FROM redditpsychometrics')
            cursor.execute('''INSERT INTO redditpsychometrics(wopenness,
                          wconscientiousness, wextraversion, wagreeableness,
                          wneuroticism, username) VALUES ( {}, {}, {}, {},
                          {}, '{}') ON CONFLICT DO NOTHING;'''.format(self.o,
                          self.c, self.e, self.a, self.n, self.u))
            connection.commit()

        except (Exception, psycopg2.Error) as error:
            return error
        
    # Check if the user has already been added to the database
    def usercheck(self):
        cursor.execute('''SELECT username FROM redditpsychometrics WHERE
                     username = '{}'  '''.format(self.u))
        retrieval = cursor.fetchall()
        return retrieval

    # Close the connection when we're done
    def close():
        if (connection):
            cursor.close()
            connection.close()


# AWS handler. It tells AWS to activate the file.
def handler(event, context):
    print('The AWS handler worked!')


# Logs in to Watson 
    def run(username):
        headers = {
        'Content-Type': 'text/plain;charset=utf-8',
        'Accept': 'application/json'
        }
        data = username.encode('utf-8')
        response = requests.post('API link', headers=headers, data=data,
                                 auth=('<apikey', 'API KEY>'))
        watson_response = response.text
        return(watson_response)

    comment = praw.models.Comment
    
    
    # Praw login
    reddit = praw.Reddit(client_id='',
                         client_secret='',
                         user_agent='',
                         password='',
                         username='')

    # input username
    def comment_checker(username):
        comment_string = ''
        user = reddit.redditor(str(username))
        for com in user.comments.new(limit=1000):
            single_comment = com.body
            comment_string += single_comment
        return(comment_string)

    # Scrapes a specific post on a subreddit
    sub = reddit.submission(url= 'specific subreddit url')

    # Searches all comments on a subreddit, looks for a searched phrase
    # which activates the bot. Takes the author's name and prints it.
    # Searches the database to ensure that the author's comment
    # history isn't in the database, and the author hasn't already
    # been analyzed
    sub.comments.replace_more()
    comment_queue = sub.comments[:]  # Seed with top-level
    while comment_queue:
        comment = comment_queue.pop(0)
        author = str(comment.author).lower()
        comment_queue.extend(comment.replies)
        searchedphrase = comment.body.lower()
        if 'spam I am' in searchedphrase:
            print(author)
            cursor.execute('''SELECT username FROM redditpsychometrics WHERE
                           username = '{}'  '''.format(author))
            ret = cursor.fetchall()
            if ret == []:
                print(author)
                check = comment_checker(author)
                author_checker = run(check)
                # Grabs information from Watson
                watson_json = json.loads(author_checker)
                dictionary = {}
                try:
                    for item in watson_json['personality']:
                        percentile = str(item['percentile'])
                        trait = str(item['trait_id'])
                        if 'conscientiousness' in trait:
                            trait = 'Conscientiousness'
                        if 'neuroticism' in trait:
                            trait = 'Neuroticism'
                        if 'extraversion' in trait:
                            trait = 'Extraversion'
                        if 'agreeableness' in trait:
                            trait = 'Agreeableness'
                        if 'openness' in trait:
                            trait = 'Openness'
                        dictionary[trait] = percentile

                    py = user(str(author), dictionary['Openness'],
                              dictionary['Conscientiousness'],
                              dictionary['Extraversion'],
                              dictionary['Agreeableness'],
                              dictionary['Neuroticism'])

                    # If the username doesn't appear in the database, print
                    # the user's information
                    if py.usercheck() == []:
                        print(str(py.usercheck))
                        py.insert_data()
                        non_json_string = ('\n'.join(f'''\n{author}\'s
                                          {trait} is: {percentile}
                                          '''.format(trait, percentile)
                                          for trait, percentile in
                                          dictionary.items()))

                        comment.reply(non_json_string)
                  
                except KeyError:
                    print(str(KeyError))
                    continue

            else:
                print('did not work for', comment.author)
                continue
    user.close()
# =============================================================================
## If testing this code locally, activate this command
# handler('ev','d')
# =============================================================================
